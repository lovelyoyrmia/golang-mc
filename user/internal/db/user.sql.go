// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET
    is_active = FALSE
WHERE "uid" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid string) error {
	_, err := q.db.Exec(ctx, deleteUser, uid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT 
    users.uid, users.email, users.username, users.secret_key,
    users.first_name, users.last_name, 
    users.phone_number, users.is_verified, users.last_login,
    user_otps.otp_enabled, user_otps.otp_verified,
    user_otps.otp_url, user_otps.otp_secret
FROM users
LEFT JOIN user_otps
ON users.uid = user_otps.uid
WHERE (users.uid = $1 OR users.phone_number = $1 ) AND users.is_active = TRUE LIMIT 1
`

type GetUserRow struct {
	Uid         string           `json:"uid"`
	Email       string           `json:"email"`
	Username    string           `json:"username"`
	SecretKey   string           `json:"secret_key"`
	FirstName   string           `json:"first_name"`
	LastName    pgtype.Text      `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	IsVerified  pgtype.Bool      `json:"is_verified"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
	OtpEnabled  pgtype.Bool      `json:"otp_enabled"`
	OtpVerified pgtype.Bool      `json:"otp_verified"`
	OtpUrl      pgtype.Text      `json:"otp_url"`
	OtpSecret   pgtype.Text      `json:"otp_secret"`
}

func (q *Queries) GetUser(ctx context.Context, uid string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, uid)
	var i GetUserRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Username,
		&i.SecretKey,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.LastLogin,
		&i.OtpEnabled,
		&i.OtpVerified,
		&i.OtpUrl,
		&i.OtpSecret,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    uid = $1,
    phone_number = $2,
    email = $3,
    username = $4,
    first_name = $5,
    last_name = $6
WHERE "uid" = $1
RETURNING id, uid, username, email, first_name, last_name, password, phone_number, secret_key, is_active, is_verified, last_login, date_joined
`

type UpdateUserParams struct {
	Uid         string      `json:"uid"`
	PhoneNumber string      `json:"phone_number"`
	Email       string      `json:"email"`
	Username    string      `json:"username"`
	FirstName   string      `json:"first_name"`
	LastName    pgtype.Text `json:"last_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Uid,
		arg.PhoneNumber,
		arg.Email,
		arg.Username,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.PhoneNumber,
		&i.SecretKey,
		&i.IsActive,
		&i.IsVerified,
		&i.LastLogin,
		&i.DateJoined,
	)
	return i, err
}

const updateUserVerified = `-- name: UpdateUserVerified :exec
UPDATE users SET 
    is_verified = $1 
WHERE "uid" = $2
`

type UpdateUserVerifiedParams struct {
	IsVerified pgtype.Bool `json:"is_verified"`
	Uid        string      `json:"uid"`
}

func (q *Queries) UpdateUserVerified(ctx context.Context, arg UpdateUserVerifiedParams) error {
	_, err := q.db.Exec(ctx, updateUserVerified, arg.IsVerified, arg.Uid)
	return err
}
