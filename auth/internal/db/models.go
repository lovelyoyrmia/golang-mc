// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"github.com/jackc/pgx/v5/pgtype"
)

type RecoverAccount struct {
	ID        string           `json:"id"`
	Uid       string           `json:"uid"`
	Email     string           `json:"email"`
	SecretKey string           `json:"secret_key"`
	IsUsed    bool             `json:"is_used"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	ExpiredAt pgtype.Timestamp `json:"expired_at"`
}

type Session struct {
	ID           string           `json:"id"`
	Uid          string           `json:"uid"`
	RefreshToken pgtype.Text      `json:"refresh_token"`
	UserAgent    pgtype.Text      `json:"user_agent"`
	ClientIp     pgtype.Text      `json:"client_ip"`
	IsBlocked    pgtype.Bool      `json:"is_blocked"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID          int32            `json:"id"`
	Uid         string           `json:"uid"`
	Username    string           `json:"username"`
	Email       string           `json:"email"`
	FirstName   string           `json:"first_name"`
	LastName    pgtype.Text      `json:"last_name"`
	Password    string           `json:"password"`
	PhoneNumber string           `json:"phone_number"`
	SecretKey   string           `json:"secret_key"`
	IsActive    pgtype.Bool      `json:"is_active"`
	IsVerified  pgtype.Bool      `json:"is_verified"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
	DateJoined  pgtype.Timestamp `json:"date_joined"`
}

type UserOtp struct {
	ID          int32       `json:"id"`
	Uid         string      `json:"uid"`
	OtpEnabled  pgtype.Bool `json:"otp_enabled"`
	OtpVerified pgtype.Bool `json:"otp_verified"`
	OtpSecret   pgtype.Text `json:"otp_secret"`
	OtpUrl      pgtype.Text `json:"otp_url"`
}

type VerifyEmail struct {
	ID        string           `json:"id"`
	Uid       string           `json:"uid"`
	Email     string           `json:"email"`
	SecretKey string           `json:"secret_key"`
	IsUsed    bool             `json:"is_used"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	ExpiredAt pgtype.Timestamp `json:"expired_at"`
}
