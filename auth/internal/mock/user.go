// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Foedie/foedie-server-v2/auth/internal/worker (interfaces: TaskUser)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	worker "github.com/Foedie/foedie-server-v2/auth/internal/worker"
	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockTaskUser is a mock of TaskUser interface.
type MockTaskUser struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUserMockRecorder
}

// MockTaskUserMockRecorder is the mock recorder for MockTaskUser.
type MockTaskUserMockRecorder struct {
	mock *MockTaskUser
}

// NewMockTaskUser creates a new mock instance.
func NewMockTaskUser(ctrl *gomock.Controller) *MockTaskUser {
	mock := &MockTaskUser{ctrl: ctrl}
	mock.recorder = &MockTaskUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUser) EXPECT() *MockTaskUserMockRecorder {
	return m.recorder
}

// UserTaskSendRecoverAccount mocks base method.
func (m *MockTaskUser) UserTaskSendRecoverAccount(arg0 context.Context, arg1 *worker.PayloadSendRecoverAccount, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserTaskSendRecoverAccount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserTaskSendRecoverAccount indicates an expected call of UserTaskSendRecoverAccount.
func (mr *MockTaskUserMockRecorder) UserTaskSendRecoverAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTaskSendRecoverAccount", reflect.TypeOf((*MockTaskUser)(nil).UserTaskSendRecoverAccount), varargs...)
}

// UserTaskSendVerificationEmail mocks base method.
func (m *MockTaskUser) UserTaskSendVerificationEmail(arg0 context.Context, arg1 *worker.PayloadSendVerifyEmail, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserTaskSendVerificationEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserTaskSendVerificationEmail indicates an expected call of UserTaskSendVerificationEmail.
func (mr *MockTaskUserMockRecorder) UserTaskSendVerificationEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTaskSendVerificationEmail", reflect.TypeOf((*MockTaskUser)(nil).UserTaskSendVerificationEmail), varargs...)
}
